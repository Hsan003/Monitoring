// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Monitoring.Migrations
{
    [DbContext(typeof(MonitoringDbContext))]
    [Migration("20250202101009_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("Monitoring.Models.Analytics", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("WebsiteId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("WebsiteId")
                        .IsUnique();

                    b.ToTable("Analytics");
                });

            modelBuilder.Entity("Monitoring.Models.Client", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Clients");
                });

            modelBuilder.Entity("Monitoring.Models.MonitoringModule.checker.CheckResult", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("AnalyticsId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("error")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<bool>("isUp")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("responseTime")
                        .HasColumnType("int");

                    b.Property<int>("status")
                        .HasColumnType("int");

                    b.Property<int>("websiteId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AnalyticsId");

                    b.HasIndex("websiteId");

                    b.ToTable("CheckResults");
                });

            modelBuilder.Entity("Monitoring.Models.MonitoringModule.checker.checker_entity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("WebsiteId")
                        .HasColumnType("int");

                    b.Property<string>("class_name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("content")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("interval")
                        .HasColumnType("int");

                    b.Property<int>("retries")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Checkers");
                });

            modelBuilder.Entity("Monitoring.Models.NotificationsModule.NotificationLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)");

                    b.Property<string>("DeliveryStatus")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Timestamp")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("NotificationLogs");
                });

            modelBuilder.Entity("Monitoring.Models.NotificationsModule.NotificationPreferences", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ChannelsJson")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("ClientId")
                        .HasColumnType("int");

                    b.Property<int>("DowntimeThreshold")
                        .HasColumnType("int");

                    b.Property<int>("LatencyThreshold")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ClientId")
                        .IsUnique();

                    b.ToTable("NotificationPreferences");
                });

            modelBuilder.Entity("Monitoring.Models.Website", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ClientId")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.ToTable("Websites");
                });

            modelBuilder.Entity("Monitoring.Models.Analytics", b =>
                {
                    b.HasOne("Monitoring.Models.Website", "Website")
                        .WithOne("Analytics")
                        .HasForeignKey("Monitoring.Models.Analytics", "WebsiteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Website");
                });

            modelBuilder.Entity("Monitoring.Models.MonitoringModule.checker.CheckResult", b =>
                {
                    b.HasOne("Monitoring.Models.Analytics", null)
                        .WithMany("CheckResults")
                        .HasForeignKey("AnalyticsId");

                    b.HasOne("Monitoring.Models.Website", "website")
                        .WithMany("CheckResults")
                        .HasForeignKey("websiteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("website");
                });

            modelBuilder.Entity("Monitoring.Models.NotificationsModule.NotificationPreferences", b =>
                {
                    b.HasOne("Monitoring.Models.Client", null)
                        .WithOne("Preferences")
                        .HasForeignKey("Monitoring.Models.NotificationsModule.NotificationPreferences", "ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Monitoring.Models.Website", b =>
                {
                    b.HasOne("Monitoring.Models.Client", "Client")
                        .WithMany("Websites")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");
                });

            modelBuilder.Entity("Monitoring.Models.Analytics", b =>
                {
                    b.Navigation("CheckResults");
                });

            modelBuilder.Entity("Monitoring.Models.Client", b =>
                {
                    b.Navigation("Preferences")
                        .IsRequired();

                    b.Navigation("Websites");
                });

            modelBuilder.Entity("Monitoring.Models.Website", b =>
                {
                    b.Navigation("Analytics")
                        .IsRequired();

                    b.Navigation("CheckResults");
                });
#pragma warning restore 612, 618
        }
    }
}
